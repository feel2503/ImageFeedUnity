apply plugin: 'com.android.library'

def buildDate = getDate()
def revisionHash = getRevisionHash()
def output_prefix = "build/outputs/aar/"

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode versionCode
        versionName versionName

        externalNativeBuild {
            cmake { cppFlags "" }
        }
    }

    externalNativeBuild {
        cmake { path "src/main/cpp/CMakeLists.txt" }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }
}

repositories {
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    //implementation 'com.android.support:appcompat-v7:26+'
    //implementation 'com.android.support:design:26+'
    //implementation 'com.android.support:appcompat-v7-28.0.0:28.0.0@aar'
    //implementation 'com.android.support:design-28.0.0:28.0.0@aar'
    //implementation 'com.android.support:support-v4-28.0.0:28.0.0@aar'
    //implementation files('libs/android-support-v4.jar')

    implementation group: 'com.android.support', name: 'support-v4', version: '26.0.0'
    implementation group: 'com.android.support', name: 'appcompat-v7', version: '26.0.0'
    implementation group: 'com.android.support', name: 'design', version: '26.0.0'
    compileOnly files('libs/unity_classes.jar')
    implementation files('libs/glide-3.6.0.jar')
    implementation "io.reactivex.rxjava2:rxjava:2.1.10"

    implementation 'com.android.support:recyclerview-v7:26.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
}

task releaseDeploy {
    doLast {
        def name_prefix = "${project.name}_Release"
        def mapping_suffix = "_mapping.zip"
        def mapping_name = "${name_prefix}${mapping_suffix}"
        def mapping_dest = "build/distributions/${mapping_name}"
        def mapping_from = "build/outputs/mapping/universal/release"

        // APK 배포
        task(deployApk, type: Copy) {
            from "${output_prefix}"
            into "${release_path}"
            rename('.*.aar', "${name_prefix}.aar")
            include('**/*release.aar')
        }.execute()

        // Debug용 Mapping 파일 압축
        task(mappingZip, type: Zip) {
            from "${mapping_from}"
            archiveName "${mapping_name}"
        }.execute()

        // Mapping 파일 배포
        task(deployMapping, type: Copy) {
            from "${mapping_dest}"
            into "${release_path}"
            include("*${mapping_suffix}")
        }.execute()
    }
}

task releaseBuild(dependsOn: ['assembleRelease']) {
}

task release(dependsOn: ['clean', 'releaseBuild', 'releaseDeploy']) {
    releaseBuild.mustRunAfter clean
    releaseDeploy.mustRunAfter releaseBuild
}

task debugDeploy {
    doLast {
        def name_prefix = "${project.name}_Debug"

        // APK 배포
        task(deployApk, type: Copy) {
            from "${output_prefix}"
            into "${release_path}"
            rename('.*.aar', "${name_prefix}.aar")
            include('**/*debug.aar')
        }.execute()
    }
}

task debugBuild(dependsOn: ['assembleDebug']) {
}

task debug(dependsOn: ['clean', 'debugBuild', 'debugDeploy']) {
    debugBuild.mustRunAfter clean
    debugDeploy.mustRunAfter debugBuild
}
